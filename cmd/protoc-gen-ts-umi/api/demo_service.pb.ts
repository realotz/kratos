// @ts-ignore
/* eslint-disable */
// Code generated by protoc-gen-ts-umi. DO NOT EDIT.
import {request} from 'umi';

const APIService = '/api/demo.api.demo';
// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.

type Options = {
  [key: string]: any
}

/** CheckInfo  /api/cratos.api.v1.Mesh/CheckInfo */
export async function CheckInfo(params: demo.Request, options?: Options) {
	return request<demo.Response>(APIService + '/cratos.api.v1.Mesh/CheckInfo', {
    	method: 'GET',
    	params: {...params},
    	...(options || {}),
	});
}

/** GetGatewayList  gateway列表 /api/cratos.api.v1.Mesh/GetGatewayList */
export async function GetGatewayList(params: demo.ListOption, options?: Options) {
	return request<demo.GatewayList>(APIService + '/cratos.api.v1.Mesh/GetGatewayList', {
    	method: 'GET',
    	params: {...params},
    	...(options || {}),
	});
}

/** GetGateway  获取gateway /api/cratos.api.v1.Mesh/GetGateway */
export async function GetGateway(params: demo.GetKind, options?: Options) {
	return request<demo.Gateway>(APIService + '/cratos.api.v1.Mesh/GetGateway', {
    	method: 'GET',
    	params: {...params},
    	...(options || {}),
	});
}

/** CreateGateway  创建 Gateway /api/cratos.api.v1.Mesh/CreateGateway */
export async function CreateGateway(params: demo.Gateway, options?: Options) {
	return request<demo.Response>(APIService + '/cratos.api.v1.Mesh/CreateGateway', {
    	method: 'POST',
		headers: {'Content-Type': 'application/json',},
    	data: {...params},
    	...(options || {}),
	});
}

/** UpdateGateway  更新 Gateway /api/cratos.api.v1.Mesh/UpdateGateway */
export async function UpdateGateway(params: demo.Gateway, options?: Options) {
	return request<demo.Response>(APIService + '/cratos.api.v1.Mesh/UpdateGateway', {
    	method: 'POST',
		headers: {'Content-Type': 'application/json',},
    	data: {...params},
    	...(options || {}),
	});
}

/** DeleteGateway  删除gateway /api/cratos.api.v1.Mesh/DeleteGateway */
export async function DeleteGateway(params: demo.DeleteKind, options?: Options) {
	return request<demo.Response>(APIService + '/cratos.api.v1.Mesh/DeleteGateway', {
    	method: 'DELETE',
    	params: {...params},
    	...(options || {}),
	});
}

declare namespace demo {
	/** ListOption   */
	type ListOption = {
		limit?:number
		continue?:string
		labelSelector?:string
		fieldSelector?:string
		namespace?:string
	}
	/** GatewayList   */
	type GatewayList = {
		list?:demo.Gateway
	}
	/** Gateway   */
	type Gateway = {
		apiVersion?:string
		kind?:string
		spec?:demo.Gateway
	}
	/** GetKind   */
	type GetKind = {
		name?:string
		namespace?:string
		version?:string
	}
	/** DeleteKind   */
	type DeleteKind = {
		name?:string
		namespace?:string
	}
	/** Request   */
	type Request = {
	}
	/** Response   */
	type Response = {
	}
}
